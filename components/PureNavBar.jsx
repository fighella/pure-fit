import React, { Component } from 'react';
import {
  Collapse,
  Navbar,
  NavbarToggler,
  NavbarBrand,
  Nav,
  Container
} from 'reactstrap';
import { NavList } from '../utils/nav';
import AppNav from '../data/nav';
import NavSchedule from './nav/NavSchedule';

class PureNavBar extends Component {
  constructor(props) {
    super(props);
    this.state = {
      isOpen: false,
      // Hardcode Menu Name for Dev
      activeMenu: ''
    };
  }

  showDropdown = e => {
    this.setState({
      activeMenu: e
    });
  };

  toggle = () => {
    this.setState({
      isOpen: !this.state.isOpen
    });
  };

  render() {
    const sub = this.state.isOpen || (
      <SubNav
        active_menu_item={this.state.activeMenu}
        active={this.showDropdown}
        classes={this.props.classes}
        loaded={this.props.loaded}
      />
    );
    return (
      <Navbar
        color="dark"
        expand="md"
        style={{ zIndex: 150, backgroundColor: '#000000', border: 'none' }}
      >
        <NavbarBrand href="/" style={{ margin: 0, padding: 0 }}>
          <svg width="220px" height="48px" viewBox="0 0 1869 428" version="1.1">
          <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Group" transform="translate(-97.000000, -45.000000)" fill="#FFFFFF">
            <g id="Group-3">
                <g id="logo_white">
                    <path d="M404.542192,392.555556 C403.184343,387.888889 383.042911,359.666667 364.711946,340.555556 C357.922699,333.444444 345.249438,327 338.233883,319 C326.918472,305.888889 300.666718,261.444445 289.577615,247.666666 C289.577615,247.666666 287.993458,223.222223 283.467294,212.333334 C279.846362,203.444445 269.662492,197.666667 269.662492,197.666667 C267.173102,171 269.662492,165.222223 266.720485,138.777778 C264.91002,121.888889 255.85769,108.777778 253.141991,83.8888888 C253.141991,83.8888888 254.499841,82.3333332 255.405074,79.4444444 C256.536616,76.3333332 255.405074,73.2222222 254.726149,69.2222222 C254.047225,64.111111 254.499841,58.3333332 253.820916,53.8888888 C253.594609,51.6666666 252.463067,45 251.105218,45 C250.426293,45 250.878909,48.1111111 250.199984,54.7777777 C250.199984,55.4444444 249.973677,53.6666666 249.068444,53.2222221 C248.842135,52.9999999 248.842135,60.3333333 248.389519,65.4444444 C247.484286,73.6666666 245.447512,86.3333333 245.221204,92.5555555 C244.994896,100.555556 244.994896,115 245.673821,122.999999 C246.579053,131.222223 250.652602,147 251.105218,155.222222 C251.557834,163.444445 247.257977,190.555556 247.257977,190.555556 C247.257977,190.555556 239.110882,201.888889 238.205649,223 C237.300416,247.222222 237.97934,225 237.074108,256.333333 C237.074108,256.333333 225.985005,271.444444 214.895903,286.111111 C199.280634,306.555556 195.207087,313.444445 184.117985,324.111112 C177.781353,330.111111 166.239635,335.000001 151.5296,346.333333 C136.140641,358.111111 121.204298,380.333333 108.078422,391.444444 C107.173189,392.333334 104.910106,394.111111 104.45749,395.444444 C104.231182,396.333333 103.552257,404.333333 104.45749,405.444445 C107.399497,409.222222 118.941216,408.111111 119.620141,408.111111 C122.788456,407.888889 124.146305,407.222222 124.372613,406.111111 C124.598922,405.222222 121.883223,405 120.97799,404.333333 C118.714908,402.555555 119.393833,393.444444 119.393833,393.444444 C136.819566,378.555555 156.282072,366.555556 187.512608,347.666667 C209.917122,334.111111 239.563498,308.555556 239.563498,308.555556 C240.016115,329.444444 239.789807,325 240.69504,347.888889 C241.373965,362.555556 247.03167,399.888889 247.257977,407.888889 C247.257977,411.444445 244.089663,417.444444 242.505505,420.777778 C241.826581,422.333334 240.468731,424.555556 238.658265,426.111111 C235.263642,429.222223 233.905793,430.333333 234.584717,431 C235.489951,431.666666 241.600272,427.888889 243.410738,426.111111 C243.410738,426.111111 242.731814,427.666666 241.826581,429.888889 C240.69504,432.555555 239.563498,435.222222 240.69504,435.666667 C241.600272,435.888889 243.410738,433.888888 244.542279,432.111111 C246.126437,429.888889 247.710595,426.333333 247.710595,426.333333 C248.389519,426.333333 250.199984,427 251.105218,427.888889 C251.105218,427.888889 251.557834,430.333333 251.784142,432.555555 C252.236759,435 253.141991,437 254.273533,437 C255.85769,437 255.85769,434.555555 255.631382,432.555555 C255.405074,430.777778 255.405074,428.333333 255.405074,428.333333 C259.252314,428.555556 260.157546,432.111111 261.968012,433.888888 C263.55217,435.444445 264.91002,435.444445 265.362636,435.222222 C266.494177,434.555555 264.91002,432.555555 264.004786,430.777778 C263.099553,429.222223 261.968012,427 261.968012,427 C261.968012,427 265.588944,427.888889 266.267869,425.666666 C266.494177,425.222222 264.91002,424.777778 263.325862,424.111111 C261.968012,423.444444 260.610163,422.777778 260.610163,422.777778 C259.252314,417.222222 258.347081,415 257.668156,410.555555 C257.21554,408.111111 256.083998,404.111111 256.083998,402.111111 C255.631382,388.111111 256.989232,383 257.668156,371 C257.894465,367.222223 258.347081,356.111111 258.347081,348.777778 C257.668156,322.777777 259.026005,311 259.026005,311 C259.026005,311 262.646937,298.111111 264.457402,294.111112 C264.457402,294.111112 295.009013,309.444444 334.612952,341.666666 C377.385206,376.555555 390.963699,390.555556 390.963699,390.555556 C390.963699,390.555556 391.642624,399.888889 389.60585,402.777778 C389.60585,402.777778 387.116459,404.111111 387.116459,404.777778 C387.342767,406.555555 390.058466,407.444445 392.774164,407.888889 C398.205562,408.555555 405.447426,407.666667 406.578966,406.333333 C407.936815,405 405.673733,396.777778 404.542192,392.555556" id="Path-Copy"></path>
                    <path d="M257.5,428 C168.987306,428 97,357.358251 97,270.5 C97,183.641749 168.987306,113 257.5,113 C346.012693,113 418,183.641749 418,270.5 C418,357.358251 346.012693,428 257.5,428 M257.5,134.103667 C180.985191,134.103667 118.505642,195.193229 118.505642,270.5 C118.505642,345.584626 180.758815,406.896333 257.5,406.896333 C334.014809,406.896333 396.494358,345.80677 396.494358,270.5 C396.494358,195.193229 334.014809,134.103667 257.5,134.103667" id="Shape-Copy" fill-rule="nonzero"></path>
                </g>
                <path d="M565.92,350 L565.92,189 L633.08,189 C665.28,189 682.99,206.71 682.99,232.47 C682.99,258.23 665.28,276.17 633.08,276.17 L577.42,276.17 L577.42,350 L565.92,350 Z M577.42,265.59 L631.93,265.59 C657.23,265.59 671.49,253.63 671.49,232.47 C671.49,211.54 657.23,199.58 631.93,199.58 L577.42,199.58 L577.42,265.59 Z M827.1266,352.76 C789.4066,352.76 762.4966,327.92 762.4966,281.23 L762.4966,189 L773.9966,189 L773.9966,281.23 C773.9966,319.87 794.4666,341.95 827.1266,341.95 C859.7866,341.95 880.0266,320.1 880.0266,281.23 L880.0266,189 L891.5266,189 L891.5266,281.23 C891.5266,327.92 864.3866,352.76 827.1266,352.76 Z M982.9932,350 L982.9932,189 L1054.5232,189 C1086.0332,189 1103.7432,206.25 1103.7432,231.55 C1103.7432,254.32 1089.7132,270.88 1063.9532,273.87 L1116.6232,350 L1103.2832,350 L1050.8432,274.79 L994.4932,274.79 L994.4932,350 L982.9932,350 Z M994.4932,264.21 L1053.6032,264.21 C1077.9832,264.21 1092.2432,252.71 1092.2432,231.78 C1092.2432,211.31 1077.9832,199.58 1053.6032,199.58 L994.4932,199.58 L994.4932,264.21 Z M1198.4298,350 L1198.4298,189 L1306.5298,189 L1306.5298,199.58 L1209.9298,199.58 L1209.9298,258 L1289.7398,258 L1289.7398,268.81 L1209.9298,268.81 L1209.9298,339.42 L1310.2098,339.42 L1310.2098,350 L1198.4298,350 Z M1504.1664,350 L1504.1664,189 L1611.1164,189 L1611.1164,199.58 L1515.6664,199.58 L1515.6664,260.07 L1594.5564,260.07 L1594.5564,270.88 L1515.6664,270.88 L1515.6664,350 L1504.1664,350 Z M1694.073,350 L1694.073,189 L1705.573,189 L1705.573,350 L1694.073,350 Z M1842.8096,350 L1842.8096,199.58 L1785.3096,199.58 L1785.3096,189 L1911.8096,189 L1911.8096,199.58 L1854.3096,199.58 L1854.3096,350 L1842.8096,350 Z" id="PURE-FIT"></path>
            </g>
        </g>
    </g>
          </svg>
        </NavbarBrand>
        <NavbarToggler onClick={() => this.toggle()}>
          {this.state.isOpen ? 'X' : '|||'}
        </NavbarToggler>
        <Collapse isOpen={this.state.isOpen} navbar>
          <Nav className="ml-auto" navbar onClick={() => this.toggle()}>
            <br />
            <NavList nav_items={AppNav.main} active={this.showDropdown} />
          </Nav>
        </Collapse>
        {sub}
      </Navbar>
    );
  }
}

const SubNav = props => {
  var megamenu, mega_display, active_menu_item, dropdowns;
  // set vars
  [active_menu_item, mega_display, dropdowns] = [
    props.active_menu_item,
    '',
    AppNav.main
  ];
  function hasMega(item) {
    return item.has_mega !== false && item.name === active_menu_item;
  }
  megamenu = dropdowns
    .filter(item => hasMega(item))
    .map((menu_item, index) => (
      <span key={index}>
        {menu_item.name === 'Schedule' ? (
          <NavSchedule classes={props.classes} loaded={props.loaded} />
        ) : (
          menu_item.mega
        )}
      </span>
    ));
  if (
    active_menu_item !== '' &&
    active_menu_item !== 'Contact' &&
    active_menu_item !== 'Team'
  ) {
    mega_display = (
      <div
        // onClick={() => props.active('')}
        id="sub-nav"
        onMouseLeave={() => props.active('')}
      >
        <Container fluid>{megamenu}</Container>
        <br />
      </div>
    );
  }
  return mega_display;
};

export default PureNavBar;
